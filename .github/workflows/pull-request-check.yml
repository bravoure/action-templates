name: Build, Run, Test, Lint and Succeed.

on:
  workflow_call:
    secrets:
      GH_PAT:
        required: true

env:
  CYPRESS_CACHE_FOLDER: /home/runner/.cache/Cypress

jobs:
  checks:
    name: Linter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Node.js (.nvmrc)
        uses: actions/setup-node@v3.5.0
        with:
          node-version-file: "frontend/.nvmrc"
          cache: "yarn"

      - name: Installing dependencies 📦
        run: cd frontend && yarn install --frozen-lockfile

      - name: Running linter 🔍
        run: cd frontend && yarn lint-pr

  #   phpstan:
  #     name: phpstan
  #     runs-on: ubuntu-latest
  #     needs: checks

  #     steps:
  #       - uses: actions/checkout@v3

  #       - name: "Validate composer.json and composer.lock"
  #         working-directory: backend
  #         run: "composer validate --strict --no-check-version"

  #       - name: "Determine composer cache directory"
  #         working-directory: backend
  #         id: "determine-composer-cache-directory"
  #         run: echo "directory=$(composer config cache-dir)" >> $GITHUB_OUTPUT

  #       - name: "Cache dependencies installed with composer"
  #         uses: "actions/cache@v3"
  #         with:
  #           path: "${{ steps.determine-composer-cache-directory.outputs.directory }}"
  #           key: "php-composer-${{ hashFiles('backend/composer.lock') }}"
  #           restore-keys: "php-composer-"

  #       - name: Composer install
  #         env: # Or as an environment variable
  #           GITHUB_TOKEN: ${{ secrets.GH_PAT }}
  #         run: |
  #           composer config --global github-oauth.github.com $GITHUB_TOKEN
  #           cd backend && composer install
  #       - name: Analyze
  #         run: |
  #           printf "%s\n" "<?php" "	return [" "		'allowAdminChanges' => false" "	];" >backend/config/local_config.php
  #           backend/vendor/bin/phpstan --memory-limit=1G --error-format=github

  build:
    name: Build & test
    runs-on: ubuntu-latest
    needs: checks

    steps:
      - uses: actions/checkout@v3

      - name: "Validate composer.json and composer.lock"
        working-directory: backend
        run: "composer validate --strict --no-check-version"

      - name: "Determine composer cache directory"
        working-directory: backend
        id: "determine-composer-cache-directory"
        run: echo "directory=$(composer config cache-dir)" >> $GITHUB_OUTPUT

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3"
        with:
          path: "${{ steps.determine-composer-cache-directory.outputs.directory }}"
          key: "php-composer-${{ hashFiles('backend/composer.lock') }}"
          restore-keys: "php-composer-"

      - name: Composer install
        env: # Or as an environment variable
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          cp backend/.env.actions.example backend/.env
          cp frontend/.env.local.actions frontend/.env.local
          printf "%s\n" "<?php" "	return [" "'allowAdminChanges' => false" "];" >backend/config/local_config.php
          composer config --global github-oauth.github.com $GITHUB_TOKEN
          docker-compose -f docker-compose.ghactions.yml up -d mariadb
          cd backend && composer install

      - name: Craft install
        run: |
          chmod -R 777 backend/storage
          chmod -R 777 backend/web
          docker-compose -f docker-compose.ghactions.yml run --rm queue php craft install/craft --email login@bravoure.nl --password bravoure --interactive=0
          docker-compose -f docker-compose.ghactions.yml run --rm queue php craft project-seeder-module/seeder/seed-db
          docker-compose -f docker-compose.ghactions.yml run --rm queue php craft resave/entries

      - name: Start environment
        run: |
          docker-compose -f docker-compose.ghactions.yml up -d webserver queue redis backend mariadb

      # get the node version from the .nvmrc file
      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat frontend/.nvmrc)"
        id: nvm

      - name: Setup Node.js (.nvmrc)
        uses: actions/setup-node@v3.5.0
        with:
          node-version-file: "frontend/.nvmrc"
          cache: "yarn"

      - name: Frontend build
        working-directory: frontend
        run: |
          yarn install --frozen-lockfile
          yarn run build && (yarn run start&)

      - name: Install Cypress and run tests
        uses: cypress-io/github-action@v4.2.0
        with:
          working-directory: e2e
          browser: chrome

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-screenshots
          path: e2e/cypress/screenshots

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: e2e/cypress/videos

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: craft-logs
          path: backend/storage/logs

      - name: Webserver logs
        if: always()
        run: |
          docker-compose -f docker-compose.ghactions.yml logs webserver
