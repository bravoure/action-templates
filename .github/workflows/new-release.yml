name: "Create new release"

on:
  workflow_call:

jobs:
  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Create release branch
        run: git checkout -b release/${{ github.event.inputs.version }}

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      # This step will differ depending on your project setup
      # Fortunately, yarn has a built-in command for doing this!
      - name: Bump version in package.json
        run: yarn version --new-version ${{ github.event.inputs.version }} --no-git-tag-version
        working-directory: ./frontend

      - name: Commit changelog and manifest files
        id: make-commit
        run: |
          git add frontend/package.json
          git commit --message "Prepare release ${{ github.event.inputs.version }}"

          echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Push new branch
        run: git push origin release/${{ github.event.inputs.version }}

      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{ github.event.inputs.version }}
          base: main
          title: Release version ${{ github.event.inputs.version }}
          reviewers: ${{ github.actor }} # By default, we request a review from the person who triggered the workflow.
          # Write a nice message to the user.
          # We are claiming things here based on the `publish-new-release.yml` workflow.
          # You should obviously adopt it to say the truth depending on your release workflow :)
          body: |
            Hi @${{ github.actor }}!

            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.

            I've bumped the versions in the manifest files in this commit: ${{ steps.make-commit.outputs.commit }}.

            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.

            Of course we never forget something. But did you check?
            - [ ] Image sizes are correct. For all our screen sizes.
            - [ ] Checked latest version Chrome (Mac, Windows, ios, Ipad os, android)
            - [ ] Checked latest version Edge (Mac, Windows)
            - [ ] Checked latest version Firefox (Mac, Windows)
            - [ ] Checked latest version Safari (Mac, ios, iPad os)
            - [ ] Checked Desktop
            - [ ] Checked Tablet on a actual tablet or simulator
            - [ ] Checked Mobile on a actual or simulator
            - [ ] Check for iphone 5 screen size. It should just work.
            - [ ] Remove console.logs & commented out code
            - [ ] Check TODO's in code
            - [ ] Correct usage of heading tags (H1, H2, etc)
            - [ ] Animations
            - [ ] Hover states
            - [ ] External link rel=”noreferrer”
            - [ ] Image alt tags
            - [ ] SSR  of pages (Check in the soucre of the page if the html is there. If you see a loader when loading the page there is an issue.)
            - [ ] Double check your work with the design file.
  publish_docs_to_wiki:
    name: Publish docs to Wiki
    runs-on: ubuntu-latest
    needs: draft-new-release
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - uses: baileyjm02/markdown-to-pdf@v1
        with:
          input_dir: wiki
          images_dir: ./wiki/images
          image_import: images
          table_of_contents: true
          output_dir: documentation/
          build_html: false
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Generated pdf version of the docs
      - name: Checkout wiki code
        uses: actions/checkout@v3
        with:
          repository: ${{github.repository}}.wiki
          path: tmp_wiki
      - name: Push to wiki
        run: |
          rsync -av --delete wiki/ tmp_wiki/ --exclude .git
          cd tmp_wiki
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff-index --quiet HEAD || git commit -m "Add changes" && git push            
  
  checks:
    name: Linter
    runs-on: ubuntu-latest
    needs: publish_docs_to_wiki

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Setup Node.js (.nvmrc)
        uses: actions/setup-node@v3.5.0
        with:
          node-version-file: "frontend/.nvmrc"
          cache: "yarn"

      - name: Installing dependencies 📦
        run: cd frontend && yarn install --frozen-lockfile

      - name: Running linter 🔍
        run: |
          [ -f /frontend/tsconfig.json ] && cd frontend && yarn ts-lint-pr
          cd frontend && yarn lint-pr
  build:
    name: Build & test
    runs-on: ubuntu-latest
    needs: checks

    steps:
      - uses: actions/checkout@v3

      - name: "Validate composer.json and composer.lock"
        working-directory: backend
        run: "composer validate --strict --no-check-version"

      - name: "Determine composer cache directory"
        working-directory: backend
        id: "determine-composer-cache-directory"
        run: echo "directory=$(composer config cache-dir)" >> $GITHUB_OUTPUT

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3"
        with:
          path: "${{ steps.determine-composer-cache-directory.outputs.directory }}"
          key: "php-composer-${{ hashFiles('backend/composer.lock') }}"
          restore-keys: "php-composer-"

      - name: Composer install
        env: # Or as an environment variable
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          cp backend/.env.actions.example backend/.env
          cp frontend/.env.local.actions frontend/.env.local
          printf "%s\n" "<?php" "	return [" "'allowAdminChanges' => false" "];" >backend/config/local_config.php
          composer config --global github-oauth.github.com $GITHUB_TOKEN
          docker-compose -f docker-compose.ghactions.yml up -d mariadb
          cd backend && composer install

      - name: Craft install
        run: |
          chmod -R 777 backend/storage
          chmod -R 777 backend/web
          docker-compose -f docker-compose.ghactions.yml run --rm queue php craft install/craft --email login@bravoure.nl --password bravoure --interactive=0
          docker-compose -f docker-compose.ghactions.yml run --rm queue php craft project-seeder-module/seeder/seed-db
          docker-compose -f docker-compose.ghactions.yml run --rm queue php craft resave/entries

      - name: Start environment
        run: |
          docker-compose -f docker-compose.ghactions.yml up -d webserver queue redis backend mariadb

      # get the node version from the .nvmrc file
      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat frontend/.nvmrc)"
        id: nvm

      - name: Setup Node.js (.nvmrc)
        uses: actions/setup-node@v3.5.0
        with:
          node-version-file: "frontend/.nvmrc"
          cache: "yarn"
